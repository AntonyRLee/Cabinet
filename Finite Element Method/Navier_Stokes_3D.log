-- FreeFem++ v4.9 (Tue, Apr 20, 2021 12:10:29 AM - git v4.9)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : // https://modules.freefem.org/modules/navier-stokes/
    2 :
    3 : // load relevant modules
    4 : load "msh3"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\msh3 = 0)
    5 : load "medit"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\medit = 0)
    6 : load "tetgen"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\tetgen = 0) load: tetgen
 
    7 : load "gmsh"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\gmsh = 0)
    8 :
    9 : //Parameters
   10 : real uMax = 10.;
   11 :
   12 : real Rho = 1.;
   13 : real Mu = 1.;
   14 :
   15 : func fx = 0.;
   16 : func fy = 0.;
   17 :
   18 : real T = 1.;
   19 : real dt = 1.e-1;
   20 :
   21 : mesh3 Th=gmshload3("..\Geometry\Navier_Stokes_Cube.msh");
   22 : // mesh3 Th=gmshload3("..\\Geometry\\Cabinet_Geometry.msh");
   23 :
   24 : plot(Th);
   25 :
   26 : // //Fespace
   27 : // fespace Uh(Th, [P2, P2]);
   28 : // Uh [ux, uy];
   29 : // Uh [upx, upy];
   30 : // Uh [vx, vy];
   31 :
   32 : // fespace Ph(Th, P1);
   33 : // Ph p;
   34 : // Ph q;
   35 :
   36 : // //Macro
   37 : // macro grad(u) [dx(u), dy(u)] //
   38 : // macro Grad(U) [grad(U#x), grad(U#y)]//
   39 : // macro div(ux, uy) (dx(ux) + dy(uy)) //
   40 : // macro Div(U) div(U#x, U#y) //
   41 :
   42 : // //Function
   43 : // func uIn = uMax * (1.-(y-D/2.)^2/(D/2.)^2);
   44 :
   45 : // //Problem
   46 : // problem NS ([ux, uy, p],[vx, vy, q])
   47 :         // = int2d(Th)(
   48 :                   // (Rho/dt) * [ux, uy]' * [vx, vy]
   49 :                 // + Mu * (Grad(u) : Grad(v))
   50 :                 // - p * Div(v)
   51 :                 // - Div(u) * q
   52 :         // )
   53 :         // - int2d(Th)(
   54 :                   // (Rho/dt) * [       convect([upx, upy], -dt, upx),
   55 :                                                 // convect([upx, upy], -dt, upy)
   56 :                                          // ]'*[vx,vy]
   57 :                 // + [fx, fy]' * [vx, vy]
   58 :         // )
   59 :         // + on(Inlet, ux=uIn, uy=0.)
   60 :         // + on(Wall, ux=0., uy=0.)
   61 :         // ;
   62 :
   63 : // // Time loop
   64 : // int nbiter = T / dt;
   65 : // for (int i = 0; i < nbiter; i++) {
   66 :         // // Update
   67 :         // [upx, upy] = [ux, uy];
   68 :
   69 :         // // Solve
   70 :         // NS;
   71 :
   72 :         // //Plot
   73 :         // //plot(p, cmm="Pressure - i="+i);
   74 :         // plot([ux, uy], cmm="Velocity - i="+i);
   75 : // }ÿ sizestack + 1024 =1296  ( 272 )
 
1211 tetrahedrons
618 triangles
1829 numElements
  Plot::  Sorry no ps version for this type of plot 5
times: compile 0.098s, execution 0.02s,  mpirank:0
 ######## We forget of deleting   5 Nb pointer,   0Bytes  ,  mpirank 0, memory leak =0
 CodeAlloc : nb ptr  3681,  size :498512 mpirank: 0
Ok: Normal End
 try getConsole C:\Users\sarao\OneDrive\Development\Cabinet\Finite Element Method\Navier_Stokes_3D.edp
